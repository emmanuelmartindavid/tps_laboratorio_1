/*
 * jugador.c
 *
 *  Created on: 13 oct. 2022
 *      Author: cuerpos
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "jugador.h"
#include "validaciones.h"

void initializeArrayPlayer(sPlayer arrayPlayer[], int lenArrayPlayer) {

	int i;
	if (arrayPlayer != NULL && lenArrayPlayer > 0) {
		for (i = 0; i < lenArrayPlayer; i++) {

			arrayPlayer[i].isEmpty = FREE;

		}
	}

}
/// @brief getFreeIndex			Funcion obtiene posicion de ARRAY de vehiculos libre a dar de alta.
///
/// @param arrayVehicle			Array de vehiculos a dar de alta.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @return						Retorna la posicion del ARRAY de vehiculos libre a dar de alta.
int getFreeIndexArrayPlayer(sPlayer arrayPlayer[], int lenArrayPlayer) {

	int i;
	int rtn = ERROR;

	if (arrayPlayer != NULL && lenArrayPlayer > 0) {
		for (i = 0; i < lenArrayPlayer; i++) {
			if (arrayPlayer[i].isEmpty == FREE) {
				rtn = i;
				break;
			}
		}
	}
	return rtn;
}
/// @brief findById				Funcion obtiene posicion de ARRAY a traves de ID ingresado por parametro.
///
/// @param arrayVehicle			Array de vehiculos.
/// @param idVehicle			ID ingresado por usuario a ser localizado en su posicion del ARRAY.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @return						Retorna la posicion del ARRAY buescado a traves del ID ingresado por usuario.
int findByIdArrayPlayer(sPlayer arrayPlayer[], int idPlayer, int lenArrayPlayer) {
	int rtn = ERROR;
	int i;

	if (arrayPlayer != NULL && idPlayer > 0 && lenArrayPlayer > 0) {

		for (i = 0; i < lenArrayPlayer; i++) {

			if (arrayPlayer[i].idPlayer
					== idPlayer&& arrayPlayer[i].isEmpty == OCCUPIED) {
				rtn = i;

				break;

			}
		}
	}

	return rtn;
}
/// @brief listOneVehicle		Funcion para listar un vehiculo.
///
/// @param vehicle				Un vehiculo de estructura sVehicle, dado de alta.
/// @param arrayType			ARRAY de tipos de vehiculos harcodeado.
/// @param lenType				Tamanio de ARRAY de tipo harcodeado.
void listOnePlayer(sPlayer player, sConfederation arrayConfederation[],
		int lenArrayConfederation) {
	char confederationDescription[50];

	if (arrayConfederation != NULL && lenArrayConfederation > 0) {

		getConfederationDescription(arrayConfederation, lenArrayConfederation,
				player.confederationId, confederationDescription);

		printf("%51d|  %-25s|  %-20s| %-10hd|  %-20.2f| %20s| %20hd|\n",
				player.idPlayer, player.name, player.position,
				player.shirtNumber, player.salary, confederationDescription,
				player.hiringYears);
	}

}
/// @brief listVehicles			Funcion lista ARRAY de vehiculos dados de alta.
///
/// @param arrayVehicle			ARRAY de vehiculos dado de alta.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculos harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int listPlayers(sPlayer arrayPlayer[], int lenArrayPlayer,
		sConfederation arrayConfederation[], int lenArrayConfederation) {

	int i = 0;
	int ammount = 0;
	int rtn = ERROR;

	if (arrayPlayer != NULL && lenArrayPlayer > 0 && arrayConfederation != NULL
			&& lenArrayConfederation > 0) {

		printf(
				"\t\t\t\t\t\t=========================================================================================================================\n");
		printf("%52s  %-10s  %-20s  %-25s %-20s %-20s %-20s\n", "|ID|",
				"NOMBRE", "|POSICION", "|NÂ° DE CAMISETA", "|SUELDO","|CONFEDERACION", "|ANIOS DE CONTRATO|");
		printf(
				"\t\t\t\t\t\t---------------------------------------------------------------------------------------------------------------\n");

		for (i = 0; i < lenArrayPlayer; i++) {

			if (arrayPlayer[i].isEmpty == OCCUPIED) {

				listOnePlayer(arrayPlayer[i], arrayConfederation,
						lenArrayConfederation);

				ammount++;

			}

		}
		if (ammount > 0) {
			rtn = OK;

			printf(
					"\t\t\t\t\t\t=========================================================================================================================\n");
		}

	}

	return rtn;
}
/// @brief getId Funcion STATIC para autoincrementar ID de cada vehiculo.
///
/// @return Retorno ID autoincrementada para cada vehiculo dado de alta.
static int getId(void) {

	static int getIdIncremental = 1;

	return getIdIncremental++;
}
/// @brief loadData				Funcion de tipo sVehicle(estructura de vehiculo) para realiza la carga de datos de vehiculo.
///
/// @return						Retorno auxiliar de sVehicle(estructura de vehiculo) con los datos cargados por el usuario.
sPlayer loadDataPlayer(int *pFlagAuxData) {

	sPlayer auxPlayer;
	int auxShirt;
	int auxHiringYears;

	if (utn_getAlphabeticDescription(auxPlayer.name, "Ingrese su nombre.\n",
			"Dato invalido. Reintente.\n", 3) == -1
			|| utn_getAlphabeticDescription(auxPlayer.position,
					"Ingrese su posicion.\n", "Dato invalido. Reintente.\n", 3)
					== -1
			|| utn_getNumberFloat(&auxPlayer.salary,
					"Ingrese su salario. desde ($10000)",
					"Dato invalido. Reintente.\n", 10000, 999999, 3) == -1
			|| utn_getNumber(&auxShirt,
					"Ingrese su numero de camiseta. Solo entre 1 y 99.\n",
					"Dato invalido. Reintente", 1, 99, 3) == -1

			|| utn_getNumber(&auxHiringYears, "Ingrese los anios de contrato",
					"Dato invalido. Reintente.\n", 1, 10, 3) == -1) {

		*pFlagAuxData = -1;

	} else {
		auxPlayer.shirtNumber = auxShirt;
		auxPlayer.hiringYears = auxHiringYears;
	}

	return auxPlayer;
}
/// @brief registerVehicle		Funcion para dar de alta un vehiculo.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int registerPlayer(sPlayer arrayPlayer[], int lenArrayPlayer,
		sConfederation arrayConfederation[], int lenArrayConfederation) {

	int rtn = ERROR;
	int index;
	int flagData;
	int pFlagConfederationId;
	sPlayer auxPlayers;

	if (arrayPlayer != NULL && arrayPlayer > 0 && arrayConfederation != NULL) {

		index = getFreeIndexArrayPlayer(arrayPlayer, lenArrayPlayer);

		if (index == -1) {
			rtn = ERROR;
		} else if (index != -1) {

			auxPlayers = loadDataPlayer(&flagData);

			if (flagData == -1) {
				rtn = -2;

			} else {

				auxPlayers.idPlayer = getId();

				auxPlayers.confederationId = getIdConfederation(
						arrayConfederation, lenArrayConfederation,
						&pFlagConfederationId);
				if (pFlagConfederationId == -1) {
					rtn = -2;
				} else {

					auxPlayers.isEmpty = OCCUPIED;

					arrayPlayer[index] = auxPlayers;

					rtn = OK;
				}
			}

		}
	}

	return rtn;
}
/// @brief downVehicle			Funcion para dar de baja un vehiculo dado de alta, atraves de ID.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int downPlayer(sPlayer arrayPlayer[], int lenArrayPlayer,
		sConfederation arrayConfederation[], int lenArrayConfederation) {
	int rtn = ERROR;
	char buffer[3];
	int idVehicleAux;
	int index;

	if (arrayPlayer != NULL && lenArrayPlayer > 0 && arrayConfederation != NULL
			&& lenArrayConfederation > 0) {

		if (listPlayers(arrayPlayer, lenArrayPlayer, arrayConfederation,
				lenArrayConfederation) == OK) {

			utn_getNumber(&idVehicleAux,
					"Ingrese el ID de jugador a dar de baja.\n",
					"Dato invalido. Reintente.\n", -1, 10000, 3);

			while (findByIdArrayPlayer(arrayPlayer, idVehicleAux,
					lenArrayPlayer) == ERROR) {

				printf("NO EXISTE ID.");

				utn_getNumber(&idVehicleAux,
						"Ingrese el ID del jugador a dar de baja.\n",
						"Dato invalido. Reintente.\n", -1, 10000, 3);
			}

			index = findByIdArrayPlayer(arrayPlayer, idVehicleAux,
					lenArrayPlayer);

			utn_getDescriptionExit(buffer,
					"\t\t\t\t\t\t\tSu vehiculo se dara de baja. Presione si para continuar. Presione no para cancelar baja de vehiculo.\n",
					"\t\t\t\t\t\t\tError. Solo si o no.\n");
			if (stricmp(buffer, "si") == 0) {

				arrayPlayer[index].isEmpty = DOWN;
				rtn = OK;
			} else {

				rtn = ERROR;
			}

		}

	}
	return rtn;
}
/// @brief modifyOneVehicle	    Funcion de tipo sVehicle(estructura de vehiculo) para realiza la carga de datos de vehiculo a modificar.
///
/// @param vehicle				Un vehiculo de estructura sVehicle dado de alta a ser modificado.
/// @return						Retorno auxiliar de sVehicle(estructura de vehiculo) con los datos modificados por el usuario.
//int modifyOneVehicle(sPlayer player) {
//
//	int rtn;
//	sPlayer *auxModify = player;
//	int auxOptionModify;
//	char exit[3];
//
//	do {
//
//		printf("\t\t****MODIFICACAR****\n");
//		utn_getNumber(&auxOptionModify, "1- DESCRIPCION.\n"
//				"2- MODELO.\n"
//				"3- COLOR.\n"
//				"4- SALIR", "\nOpcion incorrecta\n", 0, 5);
//
//		switch (auxOptionModify) {
//
//		case 1:
//			utn_getAlfaNumeric(auxModify->hiringYears,
//					"Ingrese descripcion. Puede ser alfanumerica.\n",
//					"Ingrese caracteres validos.\n");
//			break;
//		case 2:
//			utn_getNumber(&auxModify.model,
//					"Ingrese modelo (anio de fabricacion. 1960-2022).\n",
//					"Solo entre 1960 - 2022.\n", 1959, 2023);
//			break;
//		case 3:
//			utn_getDescription(auxModify.color, "Ingrese color:\n",
//					"Solo 10 letras.\n");
//			break;
//
//		case 4:
//			utn_getDescriptionExit(exit,
//					"\t\t\t\t\t\t\tPresione si para salir. Presione no para continuar en el menu de modificacion.\n",
//					"\t\t\t\t\t\t\tError. Solo si o no.\n");
//			break;
//
//		}
//	} while (stricmp(exit, "si") != 0);
//
//	return rtn;
//}
/// @brief modifyVehicles		Funcion para dar de modificar vehiculos dado de alta, atraves de ID.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
//int modifyVehicles(sVehicle arrayVehicle[], int len, sType arrayType[],
//		int lenType) {
//
//	int rtn = ERROR;
//	int idVehicle;
//	int index;
//	sVehicle auxVehicle;
//
//	if (arrayVehicle != NULL && len > 0 && arrayType != NULL && lenType > 0) {
//
//		if (listVehicles(arrayVehicle, len, arrayType, lenType) == OK) {
//
//			utn_getNumber(&idVehicle,
//					"Ingrese el ID del vehiculo a modificar.\n",
//					"Ingreso numero invalido.\n", -1, 10000);
//
//			while (findById(arrayVehicle, idVehicle, len) == -1) {
//
//				printf("NO EXISTE ID.");
//
//				utn_getNumber(&idVehicle,
//						"Ingrese el ID del vehiculo a modificar.\n",
//						"Ingreso numero invalido.\n", -1, 10000);
//			}
//
//			index = findById(arrayVehicle, idVehicle, len);
//
//			auxVehicle = modifyOneVehicle(arrayVehicle[index]);
//			arrayVehicle[index] = auxVehicle;
//
//			rtn = OK;
//
//		}
//	}
//
//	return rtn;
//}

int hardCodePlayers(sPlayer arrayPlayer[], int len, int ammount, int *pNextId) {

	int rtn = ERROR;

	sPlayer aux[18] = {

	{ 0, "Ronaldo Nazario", "Delantero", 9, 100, 23000, 3, 1 }, { 0,
			"Lionel Messi", "Delantero", 10, 101, 999000, 2, 1 }, { 0,
			"Cristiano Ronaldo", "Delantero", 7, 101, 999000, 2, 1 }, { 0,
			"EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4, 1 }, { 0,
			"Megan Rapinoe", "Mediocampista", 15, 104, 450000, 4, 1 }, { 0,
			"Mariana Larroquette", "Delantera", 19, 104, 300000, 3, 1 }, { 0,
			"Diego Maradona", "Delantero", 10, 101, 999999, 2, 1 }, { 0,
			"Johan Cruyff", "Mediocampista", 14, 101, 600000, 2, 1 }, { 0,
			"Zinedine Zidane", "Mediocampista", 10, 101, 700000, 3, 1 }, { 0,
			"Alex Morgan", "Defensora", 10, 101, 400000, 4, 1 }, { 0,
			"Alfredo Di Stefano", "Mediocampista", 9, 101, 500000, 2, 1 }, { 0,
			"Dalila Ippolito", "Mediocampista", 8, 101, 350000, 3, 1 }, { 0,
			"Julieta Cruz", "Defensora", 4, 100, 450000, 3, 1 }, { 0,
			"Virgil van Dijk", "Defensor", 4, 101, 700000, 3, 1 }, { 0,
			"Cristian Romero", "Defensor", 13, 101, 500000, 2, 1 }, { 0,
			"Agustina Barroso", "Mediocampista", 2, 100, 550000, 3, 1 }, { 0,
			"Virginia GÃ³mez", "Mediocampista", 13, 100, 200000, 2, 1 },
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1},
//			{ 0, "EstefanÃ­a Banini", "Mediocampista", 10, 101, 400000, 4,1}

			};
	if (arrayPlayer != NULL && pNextId != NULL && len > 0 && len <= 3000
			&& ammount <= len) {
		for (int i = 0; i < ammount; i++) {
			arrayPlayer[i] = aux[i];
			arrayPlayer[i].idPlayer = *pNextId;
			(*pNextId)++;
		}
		rtn = OK;
	}
	return rtn;

}
/// @brief cls			Funcion para limpiar pantalla, debido al no funcionamiento del SYSTEM CLS en consola de ECLIPSE.
///
void cls() {

	printf(
			"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

}

