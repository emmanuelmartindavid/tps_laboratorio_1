/*
 ============================================================================
 Name        : TP2_laboratorio.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "validaciones.h"
#include "jugador.h"
#include "informes.h"

#define LEN_ARRAYPLAYERS 3000
#define LEN_ARRAYCONFEDERATION 6

int main(void) {

	setbuf(stdout, NULL);
	sConfederation arrayConfederation[LEN_ARRAYCONFEDERATION];
	sPlayer arrayPlayer[LEN_ARRAYPLAYERS];

	int pNextId = 30;
	int pNextIdConfederation = 100;
	int option = 0;
	char exit[3];
	int flagRegisterPlayer = 0;
	int rtnRegisterPlayer;
	int rtnModifyPlayer;
	int rtnDownPlayer;
	int rtnReportMenu;
	int flag = 0;

	initializeArrayPlayer(arrayPlayer, LEN_ARRAYPLAYERS);

//	if (hardCodePlayers(arrayPlayer, LEN_ARRAYPLAYERS, 27, &pNextId) == OK) {
//		flagRegisterPlayer = 1;
//
//	}
	hardCodeConfederations(arrayConfederation, LEN_ARRAYCONFEDERATION, 6,
			&pNextIdConfederation);

	do {
		showMainMenu();
		if (utn_getNumber(&option, "\t\t\t\t\t\t\t\t\t\tINGRESE OPCION.\n",
				"Ingrese opcion valida\n", 0, 10, 3) == 0) {
			flag = 1;

			switch (option) {
			case 1:
				printf("\t\t\t\t\t\t\t\t\t\t\tALTA DE JUGADOR\n\n");
				rtnRegisterPlayer = registerPlayer(arrayPlayer,
				LEN_ARRAYPLAYERS, arrayConfederation,
				LEN_ARRAYCONFEDERATION);
				if (rtnRegisterPlayer == OK) {

					printf(
							"\t\t\t\t\t\t\t\t\tSU JUGADOR FUE DADO DE ALTA CORRECTAMENTE\n\n");
					flagRegisterPlayer = 1;

				} else if (rtnRegisterPlayer == ERROR) {
					printf("\t\t\t\t\t\t\t\tNO HAY ESPACIO PARA DAR ALTAS\n\n");
				} else if (rtnRegisterPlayer == -2) {
					printf("\t\t\t\t\t\t\t\tDATOS INVALIDOS. REINTENTE.\n");
				}
				break;
			case 2:

				printf("\t\t\t\t\t\t\t\t\t\tBAJA JUGADOR\n\n");

				if (sortPerIdPlayers(arrayPlayer, LEN_ARRAYPLAYERS,
						arrayConfederation,
						LEN_ARRAYCONFEDERATION) == OK
						&& listPlayers(arrayPlayer, LEN_ARRAYPLAYERS,
								arrayConfederation,
								LEN_ARRAYCONFEDERATION) == OK) {

					rtnDownPlayer = downPlayer(arrayPlayer,
					LEN_ARRAYPLAYERS);

					if (rtnDownPlayer == OK) {
						printf(
								"\t\t\t\t\t\t\t\tSU JUGADOR FUE DADO DE BAJA CORRECTAMENTE\n");

					} else if (rtnDownPlayer == ERROR) {
						printf("\t\t\t\t\t\t\t\tBAJA DE JUGADOR CANCELADA\n");

					} else if (rtnDownPlayer == -2) {
						printf("\t\t\t\t\t\t\t\tDATOS INVALIDOS. REINTENTE.\n");

					}

				} else {

					printf(
							"\t\t\t\t\t\t\t\tNADA PARA DAR DE BAJA. PRIMERO DEBE DAR DE ALTA UN JUGADOR\n\n");

				}

				break;
			case 3:
				printf("\t\t\t\t\t\t\t\t\t\tMODIFICAR JUGADOR\n\n");

				if (flagRegisterPlayer == 0) {
					printf(
							"\t\t\t\t\t\t\t\tNADA PARA MODIFICAR. PRIMERO DEBE DAR DE ALTA UN JUGADOR\n\n");
				} else {
					sortPerIdPlayers(arrayPlayer, LEN_ARRAYPLAYERS,
							arrayConfederation, LEN_ARRAYCONFEDERATION);
					listPlayers(arrayPlayer, LEN_ARRAYPLAYERS,
							arrayConfederation, LEN_ARRAYCONFEDERATION);
					rtnModifyPlayer = modifyPlayers(arrayPlayer,
					LEN_ARRAYPLAYERS, arrayConfederation,
					LEN_ARRAYCONFEDERATION);
					printf("\t\t\t\t\t\t\t\t\t\tMODIFICACION EXITOSA\n");
					if (rtnModifyPlayer == ERROR) {
						printf("\t\t\t\t\t\t\t\tNada para modificar\n");
					} else if (rtnModifyPlayer == -2) {
						printf("\t\t\t\t\t\t\t\tDATOS INVALIDOS. REINTENTE.\n");
					}
				}
				break;
			case 4:
				if (flagRegisterPlayer == 0) {
					printf(
							"\t\t\t\t\t\t\tNADA PARA MOSTRAR. PRIMERO DEBE PRIMERO DEBE DAR DE ALTA AL MENOS UN JUGADOR\n");
				} else {
					rtnReportMenu = reportsMenu(arrayPlayer, LEN_ARRAYPLAYERS,
							arrayConfederation, LEN_ARRAYCONFEDERATION);
					if (rtnReportMenu == ERROR) {

						printf("\t\t\t\t\t\t\t\tDATOS INVALIDOS. REINTENTE.\n");

					} else if (rtnReportMenu == -2) {

						printf("\t\t\t\t\t\t\tNADA PARA MOSTRAR\n");
					}
				}
				break;
			case 5:

				utn_getDescriptionExit(exit,
						"\t\t\t\t\t\t\tPresione si para salir. Presione no para continuar en el menu.\n",
						"\t\t\t\t\t\t\tError. Solo si o no.\n");

				break;

			}
		} else {
			printf("\n\t\t\t\t\t\t\t\t\t\t¡¡ALGO SALIO MAL. NO ME ROMPA!!");
			flag = 0;
			break;
		}

	} while (stricmp(exit, "si") != 0 || flag != 1);

	printf("\n\t\t\t\t\t\t\t\t\t\t¡¡HASTA LUEGO!!\n");

	return EXIT_SUCCESS;
}

