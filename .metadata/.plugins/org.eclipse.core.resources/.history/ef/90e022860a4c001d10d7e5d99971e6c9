/*
 * jugador.c
 *
 *  Created on: 13 oct. 2022
 *      Author: cuerpos
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "jugador.h"

void initializeArrayPlayer(sPlayer arrayPlayer[], int lenArrayPlayer) {

	int i;
	if (arrayPlayer != NULL && lenArrayPlayer > 0) {
		for (i = 0; i < lenArrayPlayer; i++) {

			arrayPlayer[i].isEmpty = FREE;

		}
	}

}
/// @brief getFreeIndex			Funcion obtiene posicion de ARRAY de vehiculos libre a dar de alta.
///
/// @param arrayVehicle			Array de vehiculos a dar de alta.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @return						Retorna la posicion del ARRAY de vehiculos libre a dar de alta.
int getFreeIndexArrayPlayer(sPlayer arrayPlayer[], int lenArrayPlayer) {

	int i;
	int rtn = ERROR;

	if (arrayPlayer != NULL && lenArrayPlayer > 0) {
		for (i = 0; i < lenArrayPlayer; i++) {
			if (arrayPlayer[i].isEmpty == FREE) {
				rtn = i;
				break;
			}
		}
	}
	return rtn;
}
/// @brief findById				Funcion obtiene posicion de ARRAY a traves de ID ingresado por parametro.
///
/// @param arrayVehicle			Array de vehiculos.
/// @param idVehicle			ID ingresado por usuario a ser localizado en su posicion del ARRAY.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @return						Retorna la posicion del ARRAY buescado a traves del ID ingresado por usuario.
int findByIdArrayPlayer(sPlayer arrayPlayer[], int idPlayer, int lenArrayPlayer) {
	int rtn = ERROR;
	int i;

	if (arrayPlayer != NULL && idPlayer > 0 && lenArrayPlayer > 0) {

		for (i = 0; i < lenArrayPlayer; i++) {

			if (arrayPlayer[i].idPlayer
					== idPlayer&& arrayPlayer[i].isEmpty == OCCUPIED) {
				rtn = i;

				break;

			}
		}
	}

	return rtn;
}
/// @brief listOneVehicle		Funcion para listar un vehiculo.
///
/// @param vehicle				Un vehiculo de estructura sVehicle, dado de alta.
/// @param arrayType			ARRAY de tipos de vehiculos harcodeado.
/// @param lenType				Tamanio de ARRAY de tipo harcodeado.
void listOnePlayer(sPlayer player, sConfederation arrayConfederation[],
		int lenArrayConfederation) {
	char confederationDescription[31];

	if (arrayConfederation != NULL && lenArrayConfederation > 0) {

		getConfederationDescription(arrayConfederation, lenArrayConfederation,
				player.confederationId, confederationDescription);

		printf("\t\t\t\t\t\t\t%10d  %10s  %10s %10hd  %10.2f %10s %20hd\n",
				player.idPlayer, player.name, player.position,
				player.shirtNumber, player.salary, confederationDescription,
				player.hiringYears);
	}

}
/// @brief listVehicles			Funcion lista ARRAY de vehiculos dados de alta.
///
/// @param arrayVehicle			ARRAY de vehiculos dado de alta.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculos harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int listPlayers(sPlayer arrayPlayer[], int lenArrayPlayer, sConfederation arrayConfederation[],
		int lenArrayConfederation){

	int i = 0;
	int ammount = 0;
	int rtn = ERROR;

	if (arrayPlayer != NULL && lenArrayPlayer > 0 && arrayConfederation != NULL && lenArrayConfederation > 0) {

		printf(
				"\t\t\t\t\t\t\t-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n");
		printf("\n%5s  %10s  %10s  %10s %15s\n", "\t\t\t\t\t\t\t\tID ",
				"DESCRIPCION", "MODELO", "COLOR", "TIPO");

		for (i = 0; i < lenArrayPlayer; i++) {

			if (arrayPlayer[i].isEmpty == OCCUPIED) {

				listOnePlayer(arrayPlayer[i], arrayConfederation, lenArrayConfederation);

				ammount++;

			}

		}
		if (ammount > 0) {
			rtn = OK;

			printf(
					"\t\t\t\t\t\t\t-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n");
		}

	}

	return rtn;
}
/// @brief getId Funcion STATIC para autoincrementar ID de cada vehiculo.
///
/// @return Retorno ID autoincrementada para cada vehiculo dado de alta.
static int getId(void) {

	static int getIdIncremental = 100;

	return getIdIncremental++;
}
/// @brief loadData				Funcion de tipo sVehicle(estructura de vehiculo) para realiza la carga de datos de vehiculo.
///
/// @return						Retorno auxiliar de sVehicle(estructura de vehiculo) con los datos cargados por el usuario.
int loadDataPlayer(sPlayer auxPlayer) {
	int rtn=ERROR;


	return rtn;
}
/// @brief registerVehicle		Funcion para dar de alta un vehiculo.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int registerVehicle(sVehicle arrayVehicle[], int len, sType arrayType[]) {

	int rtn = ERROR;
	int index;
	sVehicle auxvehicle;

	if (arrayVehicle != NULL && len > 0 && arrayType != NULL) {

		index = getFreeIndex(arrayVehicle, len);

		if (index != -1) {

			auxvehicle = loadData();

			auxvehicle.idVehicle = getId();

			auxvehicle.typeId = getIdtype(arrayType);

			auxvehicle.isEmpty = OCCUPIED;

			arrayVehicle[index] = auxvehicle;

			rtn = OK;

		}
	}

	return rtn;
}
/// @brief downVehicle			Funcion para dar de baja un vehiculo dado de alta, atraves de ID.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int downVehicle(sVehicle arrayVehicle[], int len, sType arrayType[],
		int lenType) {
	int rtn = ERROR;
	char buffer[3];
	int idVehicleAux;
	int index;

	if (arrayVehicle != NULL && len > 0 && arrayType != NULL && lenType > 0) {

		if (listVehicles(arrayVehicle, len, arrayType, lenType) == OK) {

			utn_getNumber(&idVehicleAux,
					"Ingrese el ID del vehiculo a dar de baja.\n",
					"Ingreso numero invalido.\n", -1, 10000);

			while (findById(arrayVehicle, idVehicleAux, len) == ERROR) {

				printf("NO EXISTE ID.");

				utn_getNumber(&idVehicleAux,
						"Ingrese el ID del vehiculo a dar de baja.\n",
						"Ingreso numero invalido.\n", -1, 10000);
			}

			index = findById(arrayVehicle, idVehicleAux, len);

			utn_getDescriptionExit(buffer,
					"\t\t\t\t\t\t\tSu vehiculo se dara de baja. Presione si para continuar. Presione no para cancelar baja de vehiculo.\n",
					"\t\t\t\t\t\t\tError. Solo si o no.\n");
			if (stricmp(buffer, "si") == 0) {

				arrayVehicle[index].isEmpty = DOWN;
				rtn = OK;
			} else {

				rtn = ERROR;
			}

		}

	}
	return rtn;
}
/// @brief modifyOneVehicle	    Funcion de tipo sVehicle(estructura de vehiculo) para realiza la carga de datos de vehiculo a modificar.
///
/// @param vehicle				Un vehiculo de estructura sVehicle dado de alta a ser modificado.
/// @return						Retorno auxiliar de sVehicle(estructura de vehiculo) con los datos modificados por el usuario.
sVehicle modifyOneVehicle(sVehicle vehicle) {

	sVehicle auxModify = vehicle;
	int auxOptionModify;
	char exit[3];

	do {

		printf("\t\t****MODIFICACAR****\n");
		utn_getNumber(&auxOptionModify, "1- DESCRIPCION.\n"
				"2- MODELO.\n"
				"3- COLOR.\n"
				"4- SALIR", "\nOpcion incorrecta\n", 0, 5);

		switch (auxOptionModify) {

		case 1:
			utn_getAlfaNumeric(auxModify.description,
					"Ingrese descripcion. Puede ser alfanumerica.\n",
					"Ingrese caracteres validos.\n");
			break;
		case 2:
			utn_getNumber(&auxModify.model,
					"Ingrese modelo (anio de fabricacion. 1960-2022).\n",
					"Solo entre 1960 - 2022.\n", 1959, 2023);
			break;
		case 3:
			utn_getDescription(auxModify.color, "Ingrese color:\n",
					"Solo 10 letras.\n");
			break;

		case 4:
			utn_getDescriptionExit(exit,
					"\t\t\t\t\t\t\tPresione si para salir. Presione no para continuar en el menu de modificacion.\n",
					"\t\t\t\t\t\t\tError. Solo si o no.\n");
			break;

		}
	} while (stricmp(exit, "si") != 0);

	return auxModify;
}
/// @brief modifyVehicles		Funcion para dar de modificar vehiculos dado de alta, atraves de ID.
///
/// @param arrayVehicle			ARRAY de vehiculos.
/// @param len					Tamanio de ARRAY de vehiculos.
/// @param arrayType			ARRAY de tipos de vehiculo harcodeado.
/// @param lenType				Tamanio de ARRAY de tipos de vehiculo harcodeado.
/// @return						Retorno, OK(1) en caso de haber funcionado correctamente. Retorno, ERROR(-1) en caso contrario.
int modifyVehicles(sVehicle arrayVehicle[], int len, sType arrayType[],
		int lenType) {

	int rtn = ERROR;
	int idVehicle;
	int index;
	sVehicle auxVehicle;

	if (arrayVehicle != NULL && len > 0 && arrayType != NULL && lenType > 0) {

		if (listVehicles(arrayVehicle, len, arrayType, lenType) == OK) {

			utn_getNumber(&idVehicle,
					"Ingrese el ID del vehiculo a modificar.\n",
					"Ingreso numero invalido.\n", -1, 10000);

			while (findById(arrayVehicle, idVehicle, len) == -1) {

				printf("NO EXISTE ID.");

				utn_getNumber(&idVehicle,
						"Ingrese el ID del vehiculo a modificar.\n",
						"Ingreso numero invalido.\n", -1, 10000);
			}

			index = findById(arrayVehicle, idVehicle, len);

			auxVehicle = modifyOneVehicle(arrayVehicle[index]);
			arrayVehicle[index] = auxVehicle;

			rtn = OK;

		}
	}

	return rtn;
}

int hardCodeVehicles(sVehicle arrayVehicle[], int len, int *pNextId) {

	int rtn = ERROR;

	sVehicle aux[25] =
			{

			{ 0, "Toyota", 1970, "Vegro", 1001, 1 }, { 0, "Maserati", 1974,
					"blanco", 1002, 1 },
					{ 0, "Porsche", 1976, "verde", 1001, 1 }, { 0, "Benz", 1961,
							"gris", 1000, 1 }, { 0, "Lamborghini", 1984,
							"plateado", 1000, 1 }, { 0, "Tesla", 1987, "dorado",
							1002, 1 }, { 0, "Honda", 1998, "azul", 1001, 1 }, {
							0, "Hyundai", 2000, "amarillo", 1000, 1 }, { 0,
							"Ford", 1964, "rojo", 1000, 1 }, { 0, "Alfa Romeo",
							1980, "marron", 1001, 1 }, { 0, "Audi", 2022,
							"azul", 1001, 1 }, { 0, "Ferrari", 1990, "gris",
							1001, 1 }, { 0, "Alpina", 1986, "negro", 1000, 1 },
					{ 0, "Fiat", 2010, "violeta", 1002, 1 }, { 0, "Cadillac",
							2019, "negro", 1000, 1 }, { 0, "Chevrolet", 2020,
							"cosmos", 1002, 1 }, { 0, "Subaru", 2015, "panton",
							1002, 1 }, { 0, "Dodge", 2013, "blanco", 1001, 1 },
					{ 0, "Jeep", 1994, "negro", 1002, 1 }, { 0, "Citroën", 2010,
							"negro", 1000, 1 }, { 0, "Peugeot", 2011, "verde",
							1001, 1 }, { 0, "Renault", 2013, "azul", 1002, 1 },
					{ 0, "Suzuki", 2020, "amarillo", 1002, 1 }, { 0, "Pagani",
							2022, "negro", 1001, 1 } };

	if (arrayVehicle != NULL && pNextId != NULL && len > 0) {
		for (int i = 0; i < len; i++) {
			arrayVehicle[i] = aux[i];
			arrayVehicle[i].idVehicle = *pNextId;
			(*pNextId)++;
		}
		rtn = OK;
	}
	return rtn;

}
/// @brief cls			Funcion para limpiar pantalla, debido al no funcionamiento del SYSTEM CLS en consola de ECLIPSE.
///
void cls() {

	printf(
			"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

}

