#include <stdio.h>
#include <stdlib.h>
#include "Jugador.h"
#include "Seleccion.h"
#include "LinkedList.h"
#include "parser.h"
#include "validaciones.h"
#include "controller.h"
#include "menus.h"
#include "string.h"
/// @brief  controllerFindPlayerById	FUNCION PARA BUSCAR INDICE DE ELEMENTO
///
/// @param pArrayListPlayer				LINKEDLIST JUGADORES
/// @param idPlayer						ENTERO
/// @return								RETORNO  POSICION DE JUGADOR EN CASO CORRECTO. RETORNO ERROR(-1) EN CASO CONTRARIO.
int controllerFindPlayerById(LinkedList *pArrayListPlayer, int idPlayer)
{
	int returncontrollerFindPlayerById = ERROR;
	int lenListPlayers;
	int auxId;
	sPlayer *pPlayer = NULL;

	if (pArrayListPlayer != NULL && ll_isEmpty(pArrayListPlayer) == 0)
	{
		lenListPlayers = ll_len(pArrayListPlayer);
		if (lenListPlayers > 0)
		{
			for (int i = 0; i < lenListPlayers; i++)
			{
				pPlayer = (sPlayer*) ll_get(pArrayListPlayer, i);
				if (pPlayer != NULL)
				{
					if (getIdPlayer(pPlayer, &auxId) == SUCCESS && auxId == idPlayer)
					{
						returncontrollerFindPlayerById = ll_indexOf(pArrayListPlayer, pPlayer);
					}
				}
			}
		}
	}
	return returncontrollerFindPlayerById;
}
/// @brief controllerFindPlayerById 		FUNCION PARA BUSCAR INDICE DE ELEMENTO
///
/// @param pArrayListNationalTeam			LINKEDLIST SELECCIONES
/// @param idNationalTeam					ENTERO
/// @return									RETORNO POSICION DE SELECCION EN CASO CORRECTO. RETORNO ERROR(-1) EN CASO CONTRARIO.
int controllerFindNationalTeamById(LinkedList *pArrayListNationalTeam, int idNationalTeam)
{
	int returnControllerFindNationalTeamById = ERROR;
	int lenListNationalTeam;
	int auxId;
	sNationalTeam *pNationalTeam = NULL;

	if (pArrayListNationalTeam != NULL && ll_isEmpty(pArrayListNationalTeam) == 0)
	{
		lenListNationalTeam = ll_len(pArrayListNationalTeam);
		if (lenListNationalTeam > 0)
		{
			for (int i = 0; i < lenListNationalTeam; i++)
			{
				pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, i);
				if (pNationalTeam != NULL)
				{
					if (getIdNationalTeam(pNationalTeam, &auxId) == SUCCESS && auxId == idNationalTeam)
					{
						returnControllerFindNationalTeamById = ll_indexOf(pArrayListNationalTeam, pNationalTeam);
					}
				}
			}
		}
	}
	return returnControllerFindNationalTeamById;
}
/// @brief controllerLoadPlayerFromText  	CARGA DATOS DE JUGADORES DESDE ARCHIVO CSV EN MODO TEXTO.
///
/// @param path								PUNTERO STRING
/// @param pArrayListPlayer					LINKEDLIST JUGADORES
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerLoadPlayerFromText(char *path, LinkedList *pArrayListPlayer)
{
	int returncontrollerLoadPlayerFromText = ERROR;
	FILE *pFile = NULL;
	if (path != NULL && pArrayListPlayer != NULL)
	{
		pFile = fopen(path, "r");
		if (pFile != NULL)
		{
			if (parserPlayerFromText(pFile, pArrayListPlayer) == SUCCESS)
			{
				returncontrollerLoadPlayerFromText = SUCCESS;
			}
			fclose(pFile);
		}
	}
	return returncontrollerLoadPlayerFromText;
}
/// @brief controllerLoadPlayerFromBinary  	CARGA DATOS DE JUGADORES DESDE ARCHIVO CSV EN MODO BINARIO.
///
/// @param path								PUNTERO STRING
/// @param pArrayListPlayer					LINKEDLIST JUGADORES
/// @return 								RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerLoadPlayerFromBinary(char *path, LinkedList *pArrayListPlayer)
{
	int returncontrollerLoadPlayerFromBinary = ERROR;
	FILE *pFile = NULL;

	if (path != NULL && pArrayListPlayer != NULL)
	{
		pFile = fopen(path, "rb");
		if (pFile != NULL)
		{
			if (parserPlayerFromBinary(pFile, pArrayListPlayer) == SUCCESS)
			{
				returncontrollerLoadPlayerFromBinary = SUCCESS;
			}
			fclose(pFile);
		}
	}
	return returncontrollerLoadPlayerFromBinary;
}
/// @brief controllerAddPlayer		ALTA DE JUGADOR.
///
/// @param pArrayListPlayer			LINKEDLIST JUGADORES
/// @return 						RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerAddPlayer(LinkedList *pArrayListPlayer)
{
	int returnControllerAddPlayer = ERROR;
	int auxIdNationalTeam = 0;
	int auxIdplayer;
	int condition = ADDPLAYER;
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL)
	{
		auxIdplayer = controllerGetIncrementalIdPlayer(&condition);
		if (auxIdplayer > 370)
		{
			pPlayer = newPlayer();
			if (pPlayer != NULL)
			{
				if (setIdPlayer(pPlayer, auxIdplayer) == SUCCESS && editFullNamePlayer(pPlayer) == SUCCESS && editAgePlayer(pPlayer) == SUCCESS && editPositionPlayer(pPlayer) == SUCCESS && editNationalityPlayer(pPlayer) == SUCCESS && setIdNationalTeamPlayer(pPlayer, auxIdNationalTeam) == SUCCESS)
				{
					if (ll_add(pArrayListPlayer, pPlayer) == 0)
					{
						returnControllerAddPlayer = SUCCESS;
					}
				}
			}
			else
			{
				deletePlayer(pPlayer);
			}
		}
	}
	return returnControllerAddPlayer;
}
/// @brief  controllerEditPlayer			EDITAR JUGADOR.
///
/// @param 	pArrayListPlayer				LINKEDLIST JUGADORES
/// @return   								RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO. RETORNO 3 EN CASO DE NO HABER REALIZADO MODIFICACIONES EN EL JUGADOR.
int controllerEditPlayer(LinkedList *pArrayListPlayer)
{
	int returncontrollerEditPlayer = ERROR;
	int auxId;
	int indexListPlayer;
	int returnEditOnePLayer;
	sPlayer *pPlayer = NULL;

	if (pArrayListPlayer != NULL)
	{
		if (ll_isEmpty(pArrayListPlayer) == 0 && controllerListPlayers(pArrayListPlayer) == SUCCESS && utn_getNumber(&auxId, "Ingrese ID de jugador a modificar.\n", "Error. Reintente.\n", 1, 500, 3) == 0)
		{
			indexListPlayer = controllerFindPlayerById(pArrayListPlayer, auxId);
			if (indexListPlayer != ERROR)
			{
				pPlayer = (sPlayer*) ll_get(pArrayListPlayer, indexListPlayer);
				if (pPlayer != NULL)
				{
					returnEditOnePLayer = editOnePlayer(pPlayer);
					if (returnEditOnePLayer == SUCCESS)
					{
						returncontrollerEditPlayer = SUCCESS;
					}
					else if (returnEditOnePLayer == ERROR)
					{
						returncontrollerEditPlayer = ERROR;
					}
					else
					{
						returncontrollerEditPlayer = NOEDIT;
					}
				}
			}
		}
	}
	return returncontrollerEditPlayer;
}
/// @brief  controllerRemovePlayer	REMOVER JUGADOR.
/// 								AGREGO PARAMETRO LINKEDLIST SELECCIONES, DEBIDO A QUE NO ENCONTRE UNA MEJOR MANERA DE PODER DISMINUIR EL CONTADOR DE CONVOCADOS EN CASO DE QUE EL JUGADOR A DAR DE BAJA ESTE CONVOCADO.
/// @param pArrayListPlayer			LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam	LINKEDLIST SELECCIONES.
/// @return 						RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerRemovePlayer(LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam)
{
	int returncontrollerRemovePlayer = ERROR;
	int auxId;
	int indexListPlayer;
	int idNationalTeamPlayer;
	char confirmation[3];
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL)
	{
		if (pArrayListNationalTeam != NULL && ll_isEmpty(pArrayListPlayer) == 0 && ll_isEmpty(pArrayListNationalTeam) == 0 && controllerListPlayers(pArrayListPlayer) == SUCCESS)
		{
			LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
			if (pArrayListNationalTeamAux != NULL)
			{
				if (utn_getNumber(&auxId, "Ingrese ID de jugador a dar de baja.\n", "Error. Reintente.\n", 1, 500, 3) == 0)
				{
					indexListPlayer = controllerFindPlayerById(pArrayListPlayer, auxId);
					if (indexListPlayer != ERROR)
					{
						pPlayer = (sPlayer*) ll_get(pArrayListPlayer, indexListPlayer);
						if (pPlayer != NULL)
						{
							if (getIdNationalTeamPLayer(pPlayer, &idNationalTeamPlayer) == SUCCESS)
							{
								showPlayerData();
								listOnePlayer(pPlayer);
								showLine();
								if (utn_getDescriptionExit(confirmation, "Se dara de baja. Ingrese si para continuar, no para cancelar baja.\n", "Error. Reintente.\n", 3) == 0)
								{
									if (stricmp(confirmation, "si") == 0)
									{
										if (idNationalTeamPlayer > 0)
										{
											if (controllerEditNationalTeam(pArrayListNationalTeamAux, idNationalTeamPlayer, CALLOFF) == ERROR)
											{
												returncontrollerRemovePlayer = ERROR;
											}
										}
										ll_remove(pArrayListPlayer, indexListPlayer);
										deletePlayer(pPlayer);
										returncontrollerRemovePlayer = SUCCESS;
									}
									else
									{
										returncontrollerRemovePlayer = REMOVECANCEL;
									}
								}
							}
						}
					}
					else
					{
						returncontrollerRemovePlayer = NOPLAYER;
					}
				}
			}
			ll_deleteLinkedList(pArrayListNationalTeamAux);
		}
	}
	return returncontrollerRemovePlayer;
}
/// @brief  controllerListPlayers   LISTA JUGADORES.
///
/// @param pArrayListPlayer			LINKEDLIST JUGADORES
/// @return 						RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerListPlayers(LinkedList *pArrayListPlayer)
{
	int returncontrollerListPlayer = ERROR;
	int lenListPlayers;
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL && ll_isEmpty(pArrayListPlayer) == 0)
	{
		lenListPlayers = ll_len(pArrayListPlayer);
		if (lenListPlayers > 0)
		{
			showPlayerData();
			for (int i = 0; i < lenListPlayers; i++)
			{
				pPlayer = (sPlayer*) ll_get(pArrayListPlayer, i);
				if (pPlayer != NULL)
				{
					if (listOnePlayer(pPlayer) == SUCCESS)
					{
						returncontrollerListPlayer = SUCCESS;
					}
				}
			}
			showLine();
		}
	}
	return returncontrollerListPlayer;
}
/// @brief  controllerListPlayersNationalTeam	LISTA JUGADORES NO CONVOCADOS O CONVOCADOS. CON SU LEYENDA CORRESPONDIENTE.
///												UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListPlayer						LINKEDLIST JUGADORES
/// @param pArrayListNationalTeam				LINKEDLIST SELECCIONES.
/// @param condition							ENTERO CONDICION.
/// @return 									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerListPlayersNationalTeam(LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam, int condition)
{
	int returncontrollerListPlayer = ERROR;
	int lenListPlayers;
	int auxId;
	char auxFullName[100];
	int auxAge;
	char auxPosition[30];
	char auxNationality[30];
	char country[30];
	int auxIdNationalTeam;
	sPlayer *pPlayer = NULL;

	if (pArrayListPlayer != NULL && pArrayListNationalTeam != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL)
		{
			if (ll_isEmpty(pArrayListPlayerAux) == 0 && ll_isEmpty(pArrayListNationalTeamAux) == 0)
			{
				lenListPlayers = ll_len(pArrayListPlayerAux);
				if (lenListPlayers > 0)
				{
					if (condition == CALLUP)
					{
						showPlayerDataNationalTeam();
						for (int i = 0; i < lenListPlayers; i++)
						{

							pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, i);
							if (pPlayer != NULL)
							{
								if (getIdNationalTeamPLayer(pPlayer, &auxIdNationalTeam) == SUCCESS && controllerGetCountry(pArrayListNationalTeamAux, auxIdNationalTeam, country) == SUCCESS && auxIdNationalTeam > 0)
								{
									if (listOnePlayer(pPlayer) == SUCCESS)
									{
										printf("\t\t\t\t\t\t|%-23s|\n", country);
									}
								}
							}

						}
						printf("\t\t\t\t\t\t=================================================================================================================================\n");
					}
					else if (condition == CALLOFF)
					{
						showPlayerDataNationalTeam();
						for (int i = 0; i < lenListPlayers; i++)
						{
							pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, i);
							if (pPlayer != NULL)
							{
								if (getIdNationalTeamPLayer(pPlayer, &auxIdNationalTeam) == SUCCESS && controllerGetCountry(pArrayListNationalTeamAux, auxIdNationalTeam, country) == SUCCESS && auxIdNationalTeam > 0)
								{
//									if (listOnePlayer(pPlayer) == SUCCESS)
//									{
//										printf("\t\t\t\t\t\t|%-23s|\n", country);
//									}
									listOnePlayer(pPlayer);
									printf("\t\t\t\t\t\t|%-23s|\n", country);
								}
							}
						}
						printf("\t\t\t\t\t\t=================================================================================================================================\n");
					}
				}
			}
		}
		ll_deleteLinkedList(pArrayListPlayerAux);
		ll_deleteLinkedList(pArrayListNationalTeamAux);
		returncontrollerListPlayer = SUCCESS;
	}
	return returncontrollerListPlayer;
}
/// @brief controllerCallUpPlayers		CONVOCAR JUGADORES
/// 									UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListPlayer				LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam		LINKEDLIST SELECCIONES.
/// @return 							RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerCallUpPlayers(LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam)
{
	int returncontrollerCallUpPlayers = ERROR;
	int idPlayer;
	int idNationalTeam;
	int indexListPlayer;
	int idNationalTeamPlayer;
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL && pArrayListNationalTeam != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL)
		{
			if (controllerListPlayersNationalTeam(pArrayListPlayerAux, pArrayListNationalTeamAux, CALLOFF) == SUCCESS && utn_getNumber(&idPlayer, "Ingrese id de jugador a convocar.\n", "Error. Reintente.\n", 1, 500, 3) == 0)
			{
				indexListPlayer = controllerFindPlayerById(pArrayListPlayerAux, idPlayer);
				if (indexListPlayer != ERROR)
				{
					pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, indexListPlayer);
					if (pPlayer != NULL)
					{
						if (getIdNationalTeamPLayer(pPlayer, &idNationalTeamPlayer) == SUCCESS)
						{
							if (idNationalTeamPlayer > 0)
							{
								returncontrollerCallUpPlayers = -3;

							}
							else
							{
								ll_sort(pArrayListNationalTeamAux, compareNationalTeamById, 1);
								if (controllerListNationalTeams(pArrayListNationalTeamAux) == SUCCESS && utn_getNumber(&idNationalTeam, "Ingrese id de seleccion a la que sera convocado.\n", "Error. Reintente.\n", 1, 32, 3) == 0)
								{
									if (controllerEditNationalTeam(pArrayListNationalTeamAux, idNationalTeam, CALLUP) == SUCCESS)
									{
										if (setIdNationalTeamPlayer(pPlayer, idNationalTeam) == SUCCESS)
										{
											returncontrollerCallUpPlayers = SUCCESS;
										}
									}
									else
									{
										returncontrollerCallUpPlayers = -2;
									}
								}
							}
						}

					}

				}
				else
				{
					returncontrollerCallUpPlayers = -4;
				}
			}

		}
		ll_deleteLinkedList(pArrayListPlayerAux);
		ll_deleteLinkedList(pArrayListNationalTeamAux);
	}
	return returncontrollerCallUpPlayers;
}
/// @brief controllerCallOffPlayers		QUITAR JUGADOR DE SELECCION.
/// 									UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListPlayer				LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam		LINKEDLIST SELECCIONES.
/// @return								RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerCallOffPlayers(LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam)
{
	int returncontrollerCallOffPlayers = ERROR;
	int idPlayer;
	int indexListPlayer;
	int idNationalTeamPlayer;
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL && pArrayListNationalTeam != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL)
		{
			if (controllerListPlayersNationalTeam(pArrayListPlayerAux, pArrayListNationalTeamAux, CALLUP) == SUCCESS && utn_getNumber(&idPlayer, "Ingrese id de jugador a quitar de seleccion.\n", "Error. Reintente.\n", 1, 500, 3) == 0)
			{
				indexListPlayer = controllerFindPlayerById(pArrayListPlayerAux, idPlayer);
				if (indexListPlayer != ERROR)
				{
					pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, indexListPlayer);
					if (pPlayer != NULL)
					{
						if (getIdNationalTeamPLayer(pPlayer, &idNationalTeamPlayer) == SUCCESS)
						{
							if (controllerEditNationalTeam(pArrayListNationalTeamAux, idNationalTeamPlayer, CALLOFF) == SUCCESS)
							{
								setIdNationalTeamPlayer(pPlayer, 0);
								returncontrollerCallOffPlayers = SUCCESS;
							}
						}
					}
				}
			}
		}
		ll_deleteLinkedList(pArrayListPlayerAux);
		ll_deleteLinkedList(pArrayListNationalTeamAux);
	}
	return returncontrollerCallOffPlayers;
}
/// @brief 	controllerSortPlayers			ORDENAMIENTO DE JUGADORES.
/// 										UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListPlayer					LINKEDLIST JUGADORES.
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSortPlayers(LinkedList *pArrayListPlayer)
{
	int returnControllerSortPlayers = ERROR;
	int option;
	int sortOption;
	if (pArrayListPlayer != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		if (pArrayListPlayerAux != NULL)
		{
			do
			{
				showSortPlayerMenu();
				if (utn_getNumber(&option, "Ingrese opcion.\n", "Error. Reintente.\n", 1, 4, 3) == 0)
				{
					if (option != 4 && utn_getNumber(&sortOption, "1 para ordenar de forma ascendente, 0 de forma descendente.\n", "Error. Reintente.\n", 0, 1, 3) == 0)
					{
						switch (option)
						{
						case 1:
							ll_sort(pArrayListPlayerAux, comparePlayersByNationality, sortOption);
							controllerListPlayers(pArrayListPlayerAux);
							break;
						case 2:
							ll_sort(pArrayListPlayerAux, comparePlayersByAgeAndName, sortOption);
							controllerListPlayers(pArrayListPlayerAux);
							break;
						case 3:
							ll_sort(pArrayListPlayerAux, comparePlayersByName, sortOption);
							controllerListPlayers(pArrayListPlayerAux);
							break;
						}
						returnControllerSortPlayers = SUCCESS;
					}
					else
					{
						returnControllerSortPlayers = ERROR;
						break;
					}
				}
				else
				{
					returnControllerSortPlayers = ERROR;
					break;
				}
			} while (option != 4);
		}
		ll_deleteLinkedList(pArrayListPlayerAux);
	}
	return returnControllerSortPlayers;
}
/// @brief	controllerSavePlayersTextMode	GUARDA DATOS DE JUGADORES DESDE ARCHIVO CSV EN MODO TEXTO.
///
/// @param path								PUNTERO STRING
/// @param pArrayListPlayer					LINKEDLIST JUGADORES.
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSavePlayersTextMode(char *path, LinkedList *pArrayListPlayer)
{
	int returnControllerSavePlayersTextMode = ERROR;
	FILE *pFile = NULL;
	int lenArrayListPlayer;
	sPlayer *pPlayer = NULL;
	int auxId;
	char auxFullName[100];
	int auxAge;
	char auxPosition[30];
	char auxNationality[30];
	int auxIdNationalTeam;

	if (path != NULL && pArrayListPlayer != NULL)
	{
		pFile = fopen(path, "w");
		if (pFile != NULL)
		{
			lenArrayListPlayer = ll_len(pArrayListPlayer);
			if (lenArrayListPlayer > 0)
			{
				fprintf(pFile, "Id,nombreCompleto,edad,posicion,nacionalidad,idSelecion\n");
				for (int i = 0; i < lenArrayListPlayer; i++)
				{
					pPlayer = (sPlayer*) ll_get(pArrayListPlayer, i);
					if (pPlayer != NULL)
					{
						if (getIdPlayer(pPlayer, &auxId) == SUCCESS && getFullNamePlayer(pPlayer, auxFullName) == SUCCESS && getAgePlayer(pPlayer, &auxAge) == SUCCESS && getPositionPlayer(pPlayer, auxPosition) == SUCCESS && getNationalityPlayer(pPlayer, auxNationality) == SUCCESS
										&& getIdNationalTeamPLayer(pPlayer, &auxIdNationalTeam) == SUCCESS)
						{
							fprintf(pFile, "%d,%s,%d,%s,%s,%d\n", auxId, auxFullName, auxAge, auxPosition, auxNationality, auxIdNationalTeam);
						}
					}
				}
				fclose(pFile);
			}
		}
		returnControllerSavePlayersTextMode = SUCCESS;
	}
	return returnControllerSavePlayersTextMode;
}
/// @brief controllerSavePlayersBinarytMode   GUARDA DATOS DE JUGADORES DESDE ARCHIVO CSV EN MODO BINARIO.
///
/// @param path								  PUNTERO STRING
/// @param pArrayListPlayer					  LINKEDLIST JUGADORES.
/// @return									  RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSavePlayersBinarytMode(char *path, LinkedList *pArrayListPlayer)
{
	int returnControllerSavePlayersBinarytMode = ERROR;
	FILE *pFile = NULL;
	int lenArrayListPlayer;
	sPlayer *pPlayer = NULL;
	int returnFwrite;

	if (path != NULL && pArrayListPlayer != NULL)
	{
		pFile = fopen(path, "wb");
		if (pFile != NULL)
		{
			lenArrayListPlayer = ll_len(pArrayListPlayer);
			if (lenArrayListPlayer > 0)
			{
				for (int i = 0; i < lenArrayListPlayer; i++)
				{
					pPlayer = (sPlayer*) ll_get(pArrayListPlayer, i);

					if (pPlayer != NULL)
					{
						returnFwrite = fwrite(pPlayer, sizeof(sPlayer), 1, pFile);
						if (returnFwrite == 1)
						{
							returnControllerSavePlayersBinarytMode = SUCCESS;
						}

					}
				}
				fclose(pFile);
			}
		}

	}
	return returnControllerSavePlayersBinarytMode;
}
/// @brief controllerLoadNationalTeamFromText 	CARGA DATOS DE SELECCIONES DESDE ARCHIVO CSV EN MODO TEXTO.
///
/// @param path									PUNTERO STRING
/// @param pArrayListNationalTeam				LINKEDLIST SELECCIONES.
/// @return										RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerLoadNationalTeamFromText(char *path, LinkedList *pArrayListNationalTeam)
{
	int returnControllerLoadNationalTeamFromText;
	FILE *pFile = NULL;

	if (path != NULL && pArrayListNationalTeam != NULL)
	{
		pFile = fopen(path, "r");

		if (pFile != NULL)
		{
			if (parserNationalTeamFromText(pFile, pArrayListNationalTeam) == SUCCESS)
			{
				returnControllerLoadNationalTeamFromText = SUCCESS;
			}
			else
			{
				returnControllerLoadNationalTeamFromText = ERROR;
			}
			fclose(pFile);
		}
	}
	return returnControllerLoadNationalTeamFromText;
}
/// @brief	controllerEditNationalTeam		EDITAR SELECCION
///       								    AGREGO PARAMETROS TIPO INT (ID - CONDICION) DEBIDO A QUE NO ENCONTRE UNA FORMA MEJOR DE UTILIZACION PARA LA FUNCION Y QUE ESTA PUEDA SER REUTILIZABLE.
/// @param pArrayListNationalTeam 			LINKEDLIST SELECCIONES.
/// @param idNationalTeam					ENTERO
/// @param condition						ENTERO
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerEditNationalTeam(LinkedList *pArrayListNationalTeam, int idNationalTeam, int condition)
{
	int returnControllerEditSeleccion = ERROR;
	int indexListNationalTeam;
	int calledUp;
	sNationalTeam *pNationalTeam = NULL;
	if (pArrayListNationalTeam != NULL)
	{
		indexListNationalTeam = controllerFindNationalTeamById(pArrayListNationalTeam, idNationalTeam);
		if (indexListNationalTeam != ERROR)
		{
			pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, indexListNationalTeam);
			if (pNationalTeam != NULL)
			{
				if (getCalledUpNationalTeam(pNationalTeam, &calledUp) == SUCCESS)
				{
					if (condition == CALLUP)
					{
						calledUp++;
						if (setCalledUpNationalTeam(pNationalTeam, calledUp) != ERROR)
						{
							returnControllerEditSeleccion = SUCCESS;
						}
					}
					else if (condition == CALLOFF)
					{
						calledUp--;
						if (setCalledUpNationalTeam(pNationalTeam, calledUp) != ERROR)
						{
							returnControllerEditSeleccion = SUCCESS;
						}
					}
				}
			}
		}
	}
	return returnControllerEditSeleccion;
}
/// @brief	controllerListNationalTeams	LISTA SELECCIONES.
///
/// @param  pArrayListNationalTeam		LINKEDLIST SELECCIONES.
/// @return								RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerListNationalTeams(LinkedList *pArrayListNationalTeam)
{
	int returncontrollerListNationalTeams = ERROR;
	int lenListNationalTeam;
	sNationalTeam *pNationalTeam = NULL;
	if (pArrayListNationalTeam != NULL && ll_isEmpty(pArrayListNationalTeam) == 0)
	{
		lenListNationalTeam = ll_len(pArrayListNationalTeam);
		if (lenListNationalTeam > 0)
		{
			showNationalTeamData();
			for (int i = 0; i < lenListNationalTeam; i++)
			{
				pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, i);
				if (pNationalTeam != NULL)
				{
					if (listOneNationalTeam(pNationalTeam) == SUCCESS)
					{
						returncontrollerListNationalTeams = SUCCESS;
					}
				}
			}
			showLineNT();
		}
	}
	return returncontrollerListNationalTeams;
}
/// @brief	controllerSortNationalTeam  ORDENAMIENTO DE SELECCIONES.
///										UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListNationalTeam		LINKEDLIST SELECCIONES.
/// @return								RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSortNationalTeam(LinkedList *pArrayListNationalTeam)
{
	int returnControllerSortNationalTeam;
	int sortOption;
	if (pArrayListNationalTeam != NULL)
	{
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		if (pArrayListNationalTeamAux != NULL)
		{
			if (utn_getNumber(&sortOption, "1 para ordenar de forma ascendente, 0 de forma descendente.\n", "Error. Reintente.\n", 0, 1, 3) == 0)
			{
				ll_sort(pArrayListNationalTeamAux, compareNationalTeamByConfederation, sortOption);
				controllerListNationalTeams(pArrayListNationalTeamAux);
				returnControllerSortNationalTeam = SUCCESS;
			}
		}
		ll_deleteLinkedList(pArrayListNationalTeamAux);
	}
	return returnControllerSortNationalTeam;
}
/// @brief	controllerSaveNationalTeamTextMode	GUARDA DATOS DE SELECCIONES DESDE ARCHIVO CSV EN MODO TEXTO.
///
/// @param path									PUNTERO STRING.
/// @param pArrayListNationalTeam				LINKEDLIST SELECCIONES.
/// @return										RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSaveNationalTeamTextMode(char *path, LinkedList *pArrayListNationalTeam)
{
	int returnControllerSaveNationalTeamTextMode = ERROR;
	FILE *pFile = NULL;
	int lenArrayListNationalTeam;
	sNationalTeam *pNationalTeam = NULL;
	int auxId;
	char auxCountry[30];
	char auxConfederation[30];
	int auxCalledUp;

	if (path != NULL && pArrayListNationalTeam != NULL)
	{
		pFile = fopen(path, "w");

		if (pFile != NULL)
		{
			lenArrayListNationalTeam = ll_len(pArrayListNationalTeam);
			if (lenArrayListNationalTeam > 0)
			{
				fprintf(pFile, "id,pais,confederacion,convocados\n");
				for (int i = 0; i < lenArrayListNationalTeam; i++)
				{
					pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, i);

					if (pNationalTeam != NULL && getIdNationalTeam(pNationalTeam, &auxId) == SUCCESS && getCountryNationalTeam(pNationalTeam, auxCountry) == SUCCESS && getConfederationNationalTeam(pNationalTeam, auxConfederation) == SUCCESS && getCalledUpNationalTeam(pNationalTeam, &auxCalledUp) == SUCCESS)
					{
						fprintf(pFile, "%d,%s,%s,%d\n", auxId, auxCountry, auxConfederation, auxCalledUp);
						returnControllerSaveNationalTeamTextMode = SUCCESS;
					}
				}
			}
		}
	}
	fclose(pFile);
	return returnControllerSaveNationalTeamTextMode;
}
/// @brief controllerLoadIdplayerTextMode 	CARGA DATO DE ID JUGADORES A DAR DE ALTA DESDE ARCHIVO CSV EN MODO TEXTO.
///
/// @param path								PUNTERO STRING.
/// @param pIdPlayer						PUNTERO ENTERO.
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerLoadIdplayerTextMode(char *path, int *pIdPlayer)
{
	int returnControllerIdplayerTextMode = ERROR;
	FILE *pFile = NULL;

	if (path != NULL && pIdPlayer)
	{
		pFile = fopen(path, "r");

		if (pFile != NULL)
		{
			if (parserIdPlayerFromText(pFile, pIdPlayer) == SUCCESS)
			{
				returnControllerIdplayerTextMode = SUCCESS;
			}
			fclose(pFile);
		}
	}
	return returnControllerIdplayerTextMode;
}
/// @brief controllerGetIncrementalIdPlayer 	OBTIENE ID INCREMENTAL PARA JUGADOR A DAR DE ALTA.
///
/// @param condition							PUNTERO ENTERO.
/// @return										RETORNO ID DE JUGADOR EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerGetIncrementalIdPlayer(int *condition)
{
	int returnControllerGetIncrementalIdPlayer = ERROR;
	static int flag = 0;
	static int idAutoincremental;
	if (flag == 0)
	{
		controllerLoadIdplayerTextMode("IdJugadoresAutoincremental.csv", &idAutoincremental);
	}
	flag = 1;
	if (*condition == ADDPLAYER)
	{
		idAutoincremental++;
		returnControllerGetIncrementalIdPlayer = idAutoincremental;
	}
	else
	{
		returnControllerGetIncrementalIdPlayer = idAutoincremental;
	}
	return returnControllerGetIncrementalIdPlayer;
}
/// @brief controllerSaveIdplayerTextMode    GAURDA ID DE JUGADOR EN MODO TEXTO A ARCHIVO CSV.
///
/// @param path								 PUNTERO STRING.
/// @return									 RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSaveIdplayerTextMode(char *path)
{
	int returnControllerSaveIdplayerTextMode = ERROR;
	int idIncremented;
	int condition;
	FILE *pFile = NULL;

	pFile = fopen(path, "r+");
	if (pFile != NULL)
	{
		idIncremented = controllerGetIncrementalIdPlayer(&condition);
		fprintf(pFile, "%d\n", idIncremented);
		returnControllerSaveIdplayerTextMode = SUCCESS;
	}
	fclose(pFile);
	return returnControllerSaveIdplayerTextMode;
}
/// @brief	controllerSavePlayersByConfederationBinaryMode  GENERA Y GUARDA ARCHIVO BINARIO DE JUGADORES CON SU SELECCION EN CONFEDERACION ELEGIDA.
///															UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param path												PUNTERO STRING
/// @param pArrayListPlayer									LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam							LINKEDLIST SELECCIONES.
/// @param pConfederationRegister							PUNTERO STRING.
/// @return													RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerSavePlayersByConfederationBinaryMode(char *path, LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam, char *pConfederationRegister)
{
	int returnControllerGetPlayersByConfederation = ERROR;
	int lenListPlayer;
	int auxIdPlayer;
	char auxConfederation[30];
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL && pArrayListNationalTeam != NULL && pConfederationRegister != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		LinkedList *pArrayListPlayerAuxNew = ll_newLinkedList();
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL && pArrayListPlayerAuxNew != NULL)
		{
			lenListPlayer = ll_len(pArrayListPlayerAux);
			if (lenListPlayer > 0)
			{
				for (int i = 0; i < lenListPlayer; i++)
				{
					pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, i);
					if (pPlayer != NULL)
					{
						if (getIdNationalTeamPLayer(pPlayer, &auxIdPlayer) == SUCCESS)
						{
							if (auxIdPlayer > 0 && controllerGetConfederation(pArrayListNationalTeamAux, auxIdPlayer, auxConfederation) == SUCCESS)
							{
								if (stricmp(auxConfederation, pConfederationRegister) == 0)
								{
									if (ll_add(pArrayListPlayerAuxNew, pPlayer) == 0)
									{
										if (controllerSavePlayersBinarytMode(path, pArrayListPlayerAuxNew) == SUCCESS)
										{
											returnControllerGetPlayersByConfederation = SUCCESS;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		ll_deleteLinkedList(pArrayListPlayerAux);
		ll_deleteLinkedList(pArrayListNationalTeamAux);
		ll_deleteLinkedList(pArrayListPlayerAuxNew);
	}
	return returnControllerGetPlayersByConfederation;
}
/// @brief	controllerLoadPlayersByConfederationFromBinary  CARGA ARCHIVO BINARIO DE JUGADORES CON SU SELECCION EN CONFEDERACION ELEGIDA.
///															UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param path												PUNTERO STRING
/// @param pArrayListPlayer									LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam							LINKEDLIST SELECCIONES.
/// @param pConfederationRegister							PUNTERO STRING.
/// @return													RETORNO PUNTERO LINKEDLIST CARGADO CON DATOS EN CASO DE HABER FUNCIONADO CORRECTAMENTE. NULL EN CASO CONTRARIO.
LinkedList controllerLoadPlayersByConfederationFromBinary(char *path, LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam, char *pConfederationRegister)
{
	LinkedList *returnControllerLoadPlayersByConfederationFromBinary = NULL;
	int lenListPlayer;
	int auxIdPlayer;
	char auxConfederation[30];
	sPlayer *pPlayer;
	if (path != NULL && pArrayListPlayer != NULL && pArrayListNationalTeam != NULL && pConfederationRegister != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		LinkedList *pArrayListPlayerAuxNew = ll_newLinkedList();
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL && pArrayListPlayerAuxNew != NULL)
		{
			if (controllerLoadPlayerFromBinary(path, pArrayListPlayerAux) == SUCCESS)
			{
				lenListPlayer = ll_len(pArrayListPlayerAux);
				if (lenListPlayer > 0)
				{
					for (int i = 0; i < lenListPlayer; i++)
					{
						pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, i);
						if (getIdNationalTeamPLayer(pPlayer, &auxIdPlayer) == SUCCESS)
						{
							if (auxIdPlayer > 0 && controllerGetConfederation(pArrayListNationalTeamAux, auxIdPlayer, auxConfederation) == SUCCESS)
							{
								if (stricmp(auxConfederation, pConfederationRegister) == 0)
								{
									if (ll_add(pArrayListPlayerAuxNew, pPlayer) != 0)
									{
										returnControllerLoadPlayersByConfederationFromBinary = NULL;
									}
								}
							}
						}
					}
				}
			}
		}
		returnControllerLoadPlayersByConfederationFromBinary = pArrayListPlayerAuxNew;
		ll_deleteLinkedList(pArrayListPlayerAux);
		ll_deleteLinkedList(pArrayListNationalTeamAux);
	}
	return *returnControllerLoadPlayersByConfederationFromBinary;
}
/// @brief controllerListPLayersByConfederationFromBinaryData 			LISTA JUGADORES CONVOCADOS POR CONFEDERACION ELEGIDOS POR EL USUARIO. TRAIDOS DESDE BINARIO.
/// 																	UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param path															PUNTERO STRING
/// @param pArrayListPlayer												LINKEDLIST JUGADORES.
/// @param pArrayListNationalTeam										LINKEDLIST SELECCIONES.
/// @param pConfederationRegister										PUNTERO STRING.
/// @return																RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerListPLayersByConfederationFromBinaryData(char *path, LinkedList *pArrayListPlayer, LinkedList *pArrayListNationalTeam, char *pConfederationRegister)
{
	int returnControllerListPLayersByConfederationFromBinaryData = ERROR;
	int flag;

	if (path != NULL && pArrayListPlayer != NULL && pArrayListNationalTeam != NULL && pConfederationRegister != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		LinkedList *pArrayListNationalTeamAux = ll_clone(pArrayListNationalTeam);
		LinkedList *pArrayListPlayerAuxNew = ll_newLinkedList();
		if (pArrayListPlayerAux != NULL && pArrayListNationalTeamAux != NULL && pArrayListPlayerAuxNew != NULL)
		{
			*pArrayListPlayerAuxNew = controllerLoadPlayersByConfederationFromBinary(path, pArrayListPlayerAux, pArrayListNationalTeamAux, pConfederationRegister);
			if (pArrayListPlayerAuxNew != NULL)
			{
				controllerValidateCallUpPlayers(pArrayListPlayerAuxNew, &flag);
				if (flag == CALLUP)
				{
					if (controllerListPlayersNationalTeam(pArrayListPlayerAuxNew, pArrayListNationalTeamAux, CALLUP) == SUCCESS)
					{
						returnControllerListPLayersByConfederationFromBinaryData = SUCCESS;
					}
				}

			}
			ll_deleteLinkedList(pArrayListPlayerAux);
			ll_deleteLinkedList(pArrayListNationalTeamAux);
			ll_deleteLinkedList(pArrayListPlayerAuxNew);
		}

	}
	return returnControllerListPLayersByConfederationFromBinaryData;
}
/// @brief controllerGetCountry	   				OBTIENE STRING DE PAIS A TRAVES DE ID
///
/// @param pArrayListNationalTeam				LINKEDLIST SELECCIONES.
/// @param idNationalTeamPLayer					ENTERO.
/// @param pCountry								PUNTERO STRING.
/// @return										RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerGetCountry(LinkedList *pArrayListNationalTeam, int idNationalTeamPLayer, char *pCountry)
{
	int returnControllerGetCountry = ERROR;
	int lenListNationalTeam;
	int i;
	int id;
	char country[30];
	sNationalTeam *pNationalTeam;

	if (pArrayListNationalTeam != NULL && idNationalTeamPLayer >= 0 && pCountry != NULL)
	{
		lenListNationalTeam = ll_len(pArrayListNationalTeam);
		if (lenListNationalTeam > 0)
		{
			for (i = 0; i < lenListNationalTeam; i++)
			{
				pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, i);
				if (pNationalTeam != NULL)
				{
					if (getIdNationalTeam(pNationalTeam, &id) == SUCCESS)
					{
						if (id == idNationalTeamPLayer && getCountryNationalTeam(pNationalTeam, country) == SUCCESS)
						{
							strcpy(pCountry, country);
							returnControllerGetCountry = SUCCESS;
							break;
						}
						else
						{
							strcpy(pCountry, "NO CONVOCADO");
						}
					}
				}
			}
		}
	}
	return returnControllerGetCountry;
}
/// @brief controllerGetConfederation		OBTIENE STRING DE CONFEDERACION A TRAVES DE ID
///
/// @param pArrayListNationalTeam			LINKEDLIST SELECCIONES.
/// @param idNationalTeam					ENTERO.
/// @param pConfederation					PUNTERO STRING.
/// @return									RETORNO SUCCESS(1) EN CASO CORRECTO. ERROR(-1) EN CASO CONTRARIO.
int controllerGetConfederation(LinkedList *pArrayListNationalTeam, int idNationalTeam, char *pConfederation)
{
	int returnControllerGetConfederation = ERROR;
	int lenListNationalTeam;
	int auxIdNationalTeam;
	char auxConfederation[30];
	sNationalTeam *pNationalTeam = NULL;
	if (pArrayListNationalTeam != NULL && pConfederation != NULL && idNationalTeam > 0)
	{
		lenListNationalTeam = ll_len(pArrayListNationalTeam);
		if (lenListNationalTeam > 0)
		{
			for (int i = 0; i < lenListNationalTeam; i++)
			{
				pNationalTeam = (sNationalTeam*) ll_get(pArrayListNationalTeam, i);
				if (pNationalTeam != NULL)
				{
					if (getIdNationalTeam(pNationalTeam, &auxIdNationalTeam) == SUCCESS)
					{
						if (auxIdNationalTeam == idNationalTeam && getConfederationNationalTeam(pNationalTeam, auxConfederation) == SUCCESS)
						{
							strcpy(pConfederation, auxConfederation);
							returnControllerGetConfederation = SUCCESS;
						}
					}
				}
			}
		}
	}
	return returnControllerGetConfederation;
}
/// @brief controllerValidateCallUpPlayers		VERIFICA SI HAY O NO JUGADORES CONVOCADOS.
///												UTILIZO LL_CLONE PARA NO TOCAR LOS LIKNKEDLIST ORIGINALES.
/// @param pArrayListPlayer						LINKEDLIST JUGADORES.
/// @param pFlag								PUNTERO ENTERO.
void controllerValidateCallUpPlayers(LinkedList *pArrayListPlayer, int *pFlag)
{
	int lenListPlayers;
	int idNationalTeam;
	sPlayer *pPlayer = NULL;
	if (pArrayListPlayer != NULL && pFlag != NULL)
	{
		LinkedList *pArrayListPlayerAux = ll_clone(pArrayListPlayer);
		lenListPlayers = ll_len(pArrayListPlayerAux);
		if (lenListPlayers > 0)
		{
			for (int i = 0; i < lenListPlayers; i++)
			{
				*pFlag = 0;
				pPlayer = (sPlayer*) ll_get(pArrayListPlayerAux, i);
				if (pPlayer != NULL)
				{
					if (getIdNationalTeamPLayer(pPlayer, &idNationalTeam) == SUCCESS)
					{
						if (idNationalTeam > 0)
						{
							*pFlag = CALLUP;
							break;
						}
						else
						{
							*pFlag = CALLOFF;
						}
					}
				}
			}
		}
	}
}

